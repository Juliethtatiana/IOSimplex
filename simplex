{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"simplex","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"KT0r8jz6PVhj","colab_type":"text"},"source":["**Simplex Estandar**"]},{"cell_type":"code","metadata":{"id":"N_8hQCstpy5F","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1596419822918,"user_tz":300,"elapsed":71302,"user":{"displayName":"Igor McLven","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgOYD_WYLa1xwfp7kOd8L_C5p8iHAGOElN92pAm6iM=s64","userId":"12767316730867944889"}},"outputId":"ac6a3ed0-4a2f-477e-af28-be9a8918f111"},"source":["import sys\n","import numpy as np\n","from fractions import Fraction\n","\n","try:\n","    import pandas as pd\n","\n","    pandas_av = True\n","except ImportError:\n","    pandas_av = False\n","    pass\n","\n","product_names = []  #arreglo que contiene los nombres de  las restricciones\n","col_values = [] #\n","z_equation = [] #coeficientes de la funcion objetivo\n","final_rows = []\n","solutions = []\n","x = 'X' #nombre de las variables del problema\n","z2_equation = []\n","removable_vars = []\n","no_solution = \"\"\"\n","       ---Error ----\n","Tu problema puede que no tenga solución.\n","\n","Puede que esto sea por que los coeficientes de las variables y restricciones son incorrectos\n","Por favor revisa y vuelve a correr el programa :3\n","\n","           \"\"\"\n","\n","\n","def main():\n","    #global decimals\n","    global const_num, prod_nums\n","    print(\"\"\"\n","   CALCULO METODO SIMPLEX: Maximización (<=).\n","  \n","\n","   \"\"\") # para tomar en cuenta, para un problema de maximización se debe tener todas las restricciones con signo <=\n"," \n","    prob_type =1\n","    global const_names # lista que contiene los nombres que el usuario quiere para la restricciones\n","    const_num = int(input(\"Cuantas variables tienes: >\")) #le pide al usuario el número  de variables que posee el problema\n","    prod_nums = int(input(\"Cuantas restricciones tienes: >\"))  # le pide  al usuario el numero de restricciones que poee el problema\n","    const_names = [x + str(i) for i in range(1, const_num + 1)] #se le asigna los nombres a las variables para que, dependiendo de la cantidad de variables quede de la siguiente forma: X1,X2,...\n","    for i in range(1, prod_nums + 1):\n","      prod_val = input(\"ingrese el nombre de la restricción No {}: >\".format(i))# se le pide  al usuario que ingrese los nombres de las restricciones\n","      product_names.append(prod_val)\n","    print(\"__________________________________________________\")\n","    if prob_type == 1:\n","      #Ingreso de valores de la función objetivo\n","        for i in const_names:\n","            try:\n","                val = float(Fraction(input(\"ingresa el valor de %s en la ecuacion Z: >\" % i))) #se le pide al usuario que ingrese el coeficiente de cada variable en la función objetivo\n","            except ValueError:\n","                print(\"por favor ingresa un numero\")\n","                val = float(Fraction(input(\"ingresa el valor de %s en la ecuacion Z: >\" % i)))# en caso de que el valor que el usuario ingrese  no sea un numero o un valor valido, se le solicita que ingrese un valor correcto\n","            z_equation.append(0 - int(val)) #cada coeficiente ingresado se añade a la lista de  la  ecuacion objetivo de tal forma que quedan organizados siendo la primera posicion el coeficiente de la variable X1 y asi sucesivamente\n","        z_equation.append(0) #en caso de que ocurra algun error el valor 0 será puesto por defecto \n","\n","        while len(z_equation) <= (const_num + prod_nums):\n","            z_equation.append(0)\n","        print(\"__________________________________________________\")\n","        for prod in product_names:\n","            for const in const_names:\n","                try:\n","                    val = float(Fraction(input(\"ingresa el valor de %s en %s: >\" % (const, prod)))) # se le pide al usuario que ingrese los coeficientes de cada variable por cada una de las restricciones\n","                except ValueError:\n","                    print(\"por favor ingresa un numero\")\n","                    val = float(Fraction(input(\"ingresa el valor de %s in %s: >\" % (const, prod))))\n","                col_values.append(val)\n","            equate_prod = float(Fraction(input('%s igual a: >' % prod)))  #  se  le  pide al usuario que  ingrese el valor al que es igual cada restriccion \n","            col_values.append(equate_prod)\n","\n","        final_cols = stdz_rows(col_values)#se llama a una función que esta en el codigo la cual sirve para armar las filas de tal forma que queden los coeficientes de cada restriccion mas los coeficientes de las variables de holgura\n","        i = len(const_names) + 1 # cantidad de restricciones mas la solución\n","        while len(const_names) < len(final_cols[0]) - 1:\n","            const_names.append('X' + str(i)) # se añade a la lista de los nombres de las variables de holgura los nombres de las variables a encontrar  (nombres de la parte de arriba de la tabla)\n","            solutions.append('X' + str(i)) # se añade los nombres de las variables a la lista solutions\n","            i += 1\n","        solutions.append(' Z') #se añade el nombre de la función objetivo 'Z' (son los nombres de la parte lateral derecha de las tablas impresas)\n","        const_names.append('Solución') #se añade a la lista el nombre 'solución' para hacer referencia a la columna de las respuestas\n","        final_cols.append(z_equation) # se añade los coeficientes de la ecuacion Z a la lista estandarizada con los coeficientes del sistema de ecuaciones\n","        final_rows = np.array(final_cols).T.tolist() #se hace la transpuesta a la matriz final_cols y asi quedan los coeficientes de las restricciones separados por cada variable \n","        print('\\n##########################################')\n","        maximization(final_cols, final_rows) # se llama a la función maximización, la cual realiza todo el proceso con los valores ya previamente ingresados\n","    else:\n","        sys.exit(\"ingresa un valor adecuado ->\" + str(prob_type))\n","\n","\n","def maximization(final_cols, final_rows):\n","    row_app = []\n","    ultima_col = final_cols[-1] # coeficientes de la ecuación Z\n","    min_last_row = min(ultima_col) # se busca el minimo valor de los coeficientes de la ecuación Z\n","    min_manager = 1\n","    print(\" TABLA N* 1\")\n","    try:\n","        final_pd = pd.DataFrame(np.array(final_cols), columns=const_names, index=solutions) # se hace un dataframe que tiene como indices los nombres de las variables y la funcion Z y commo columnas los nombres de las variables y las variables de holgura mas el nombre de la columna solución\n","        print(final_pd)\n","    except:\n","        print('  ', const_names)\n","        i = 0\n","        for cols in final_cols:\n","            print(solutions[i], cols)\n","            i += 1\n","    count = 2\n","    elemento_pivote = 2\n","    while min_last_row < 0 < elemento_pivote != 1 and min_manager == 1 and count < 6:\n","        print(\"*********************************************************\")\n","        ultima_col = final_cols[-1] #fila con los coeficientes de la ecuación Z \n","        last_row = final_rows[-1] # se escogen la columna de las respuestas\n","        min_last_row = min(ultima_col)  # se escoge el valor minimo de la ultima columna\n","        index_of_min = ultima_col.index(min_last_row) # se saca el indice del elemento minimo para escoger el pivote\n","        pivot_row = final_rows[index_of_min] # se saca la fila del elemento más pequeño\n","        index_pivot_row = final_rows.index(pivot_row) # se saca el indice de la columna pivote\n","        row_div_val = []\n","        i = 0\n","        for _ in last_row[:-1]:\n","            try:\n","                val = float(last_row[i] / pivot_row[i]) # se divide los valores de las respuestas entre los valores de los coeficientes de las variables de la fila \n","                if val <= 0: # para evitar que se escojan valores denominadores al momento de escoger la fila pivote\n","                    val = 10000000000\n","                else:\n","                    val = val\n","                row_div_val.append(val)\n","            except ZeroDivisionError:\n","                val = 10000000000\n","                row_div_val.append(val)\n","            i += 1\n","        min_div_val = min(row_div_val)      #se escoje el mas cercano a cero y positivo\n","        index_min_div_val = row_div_val.index(min_div_val) #se escoge el indice del valor escogido como pivote\n","        elemento_pivote = pivot_row[index_min_div_val] # se guarda en una variable el elmento pivote escogido\n","        pivot_col = final_cols[index_min_div_val]  # se saca la fila pivote\n","        index_pivot_col = final_cols.index(pivot_col) # se saca el indice \n","        row_app[:] = []\n","        #Se realiza el metodo de Gauss\n","        for col in final_cols:\n","            if col is not pivot_col and col is not final_cols[-1]: # se hace el respectivo procedimiento para las filas que no son la fila pivote ni la fila correspondiente a la ecuacion de la funcion objetivo\n","                form = col[index_of_min] / elemento_pivote # se divide cada valor entre el valor del pivote\n","                final_val = np.array(pivot_col) * form # se multiplica el valor de la columna pivote por ek valor que se explica anteriormente\n","                new_col = (np.round((np.array(col) - final_val), 2)).tolist() # se restan los dos valores de tal manera que los valores de la culumna pivote se cancelen y queden en 0\n","                final_cols[final_cols.index(col)] = new_col # se reemplaza en la lista de coeficientes final_cols\n","\n","            elif col is pivot_col: # si la columna es la columna pivote\n","                new_col = (np.round((np.array(col) / elemento_pivote), 2)).tolist()  # se crea una nueva columan dividiendo la fila por el elemento pivote\n","                final_cols[final_cols.index(col)] = new_col #se reemplazan los valores en la lista de final_cols \n","            else:\n","                form = abs(col[index_of_min]) / elemento_pivote # se  divide el valor absoluto de los coeficientes de la funcion objetivo entre el elemento pivote\n","                final_val = np.array(pivot_col) * form\n","                new_col = (np.round((np.array(col) + final_val), 2)).tolist()\n","                final_cols[final_cols.index(col)] = new_col\n","        final_rows[:] = [] # se vacia la lista final_rows\n","        re_final_rows = np.array(final_cols).T.tolist() # se vuelven a asignar los nuevos valores de la transpuesta de la matriz final_cols\n","        final_rows = final_rows + re_final_rows\n","\n","        if min(row_div_val) != 10000000000: # si hay ...\n","            min_manager = 1\n","        else:\n","            min_manager = 0\n","        print('elemento pivote: %s' % elemento_pivote)\n","        print('columna pivote: ', pivot_row)\n","        print('fila pivote: ', pivot_col)\n","        print(\"\\n\")\n","        solutions[index_pivot_col] = const_names[index_pivot_row]\n","\n","        print(\"TABLA N* %d \" % count)\n","        try:\n","            final_pd = pd.DataFrame(np.array(final_cols), columns=const_names, index=solutions)\n","            print(final_pd) # se imprime la tabla de cada iteración \n","        except:\n","            print(\"TABLA N* %d \" % count)\n","            print('  ', const_names)\n","            i = 0\n","            for cols in final_cols:\n","                print(solutions[i], cols)\n","                i += 1\n","        count += 1\n","        ultima_col = final_cols[-1]\n","        last_row = final_rows[-1]\n","        min_last_row = min(ultima_col)\n","        index_of_min = ultima_col.index(min_last_row)\n","        pivot_row = final_rows[index_of_min]\n","        row_div_val = []\n","        i = 0\n","        for _ in last_row[:-1]:\n","            try:\n","                val = float(last_row[i] / pivot_row[i])\n","                if val <= 0:\n","                    val = 10000000000\n","                else:\n","                    val = val\n","                row_div_val.append(val)\n","            except ZeroDivisionError:\n","                val = 10000000000\n","                row_div_val.append(val)\n","            i += 1\n","        min_div_val = min(row_div_val)\n","        index_min_div_val = row_div_val.index(min_div_val)\n","        elemento_pivote = pivot_row[index_min_div_val]\n","        if elemento_pivote < 0:\n","            print(no_solution)\n","   \n","\n","\n","\n","\n","def stdz_rows(column_values):\n","    final_cols = [column_values[x:x + const_num + 1] for x in range(0, len(column_values), const_num + 1)] #arma una lista  de listas en donde cada una  tiene los coeficientes de las variables de cada  una de las restricciones\n","    for cols in final_cols:\n","        while len(cols) < (const_num + prod_nums):\n","            cols.insert(-1, 0) #añade  ceros a cada  una de las filas dependiendo de las variables de holgura que se generen\n","\n","    i = const_num #numero de constantes\n","    for sub_col in final_cols:\n","        sub_col.insert(i, 1) #remplaza el cero de la variable de holgura de la respectiva restriccion a 1\n","        i += 1\n","    return final_cols\n","\n","\n","if __name__ == \"__main__\":\n","    main()\n","\n","# Se usan las lista y arreglos de (numpy) "],"execution_count":6,"outputs":[{"output_type":"stream","text":["\n","   CALCULO METODO SIMPLEX: Maximización (<=).\n","  \n","\n","   \n","Cuantas variables tienes: >3\n","Cuantas restricciones tienes: >3\n","ingrese el nombre de la restricción No 1: >H.Admin\n","ingrese el nombre de la restricción No 2: >H.Costos\n","ingrese el nombre de la restricción No 3: >H.Auditoria\n","__________________________________________________\n","ingresa el valor de X1 en la ecuacion Z: >6\n","ingresa el valor de X2 en la ecuacion Z: >8\n","ingresa el valor de X3 en la ecuacion Z: >10\n","__________________________________________________\n","ingresa el valor de X1 en H.Admin: >2\n","ingresa el valor de X2 en H.Admin: >4\n","ingresa el valor de X3 en H.Admin: >4\n","H.Admin igual a: >10\n","ingresa el valor de X1 en H.Costos: >6\n","ingresa el valor de X2 en H.Costos: >2\n","ingresa el valor de X3 en H.Costos: >8\n","H.Costos igual a: >22\n","ingresa el valor de X1 en H.Auditoria: >4\n","ingresa el valor de X2 en H.Auditoria: >8\n","ingresa el valor de X3 en H.Auditoria: >6\n","H.Auditoria igual a: >16\n","\n","##########################################\n"," TABLA N* 1\n","     X1   X2    X3   X4   X5   X6  Solución\n","X4  2.0  4.0   4.0  1.0  0.0  0.0      10.0\n","X5  6.0  2.0   8.0  0.0  1.0  0.0      22.0\n","X6  4.0  8.0   6.0  0.0  0.0  1.0      16.0\n"," Z -6.0 -8.0 -10.0  0.0  0.0  0.0       0.0\n","*********************************************************\n","elemento pivote: 4.0\n","columna pivote:  [4.0, 8.0, 6.0, -10.0]\n","fila pivote:  [2.0, 4.0, 4.0, 1, 0, 0, 10.0]\n","\n","\n","TABLA N* 2 \n","     X1   X2   X3    X4   X5   X6  Solución\n","X3  0.5  1.0  1.0  0.25  0.0  0.0       2.5\n","X5  2.0 -6.0  0.0 -2.00  1.0  0.0       2.0\n","X6  1.0  2.0  0.0 -1.50  0.0  1.0       1.0\n"," Z -1.0  2.0  0.0  2.50  0.0  0.0      25.0\n","*********************************************************\n","elemento pivote: 2.0\n","columna pivote:  [0.5, 2.0, 1.0, -1.0]\n","fila pivote:  [2.0, -6.0, 0.0, -2.0, 1.0, 0.0, 2.0]\n","\n","\n","TABLA N* 3 \n","     X1   X2   X3    X4    X5   X6  Solución\n","X3  0.0  2.5  1.0  0.75 -0.25  0.0       2.0\n","X1  1.0 -3.0  0.0 -1.00  0.50  0.0       1.0\n","X6  0.0  5.0  0.0 -0.50 -0.50  1.0       0.0\n"," Z  0.0 -1.0  0.0  1.50  0.50  0.0      26.0\n","*********************************************************\n","elemento pivote: 2.5\n","columna pivote:  [2.5, -3.0, 5.0, -1.0]\n","fila pivote:  [0.0, 2.5, 1.0, 0.75, -0.25, 0.0, 2.0]\n","\n","\n","TABLA N* 4 \n","     X1   X2   X3   X4   X5   X6  Solución\n","X2  0.0  1.0  0.4  0.3 -0.1  0.0       0.8\n","X1  1.0  0.0  1.2 -0.1  0.2  0.0       3.4\n","X6  0.0  0.0 -2.0 -2.0  0.0  1.0      -4.0\n"," Z  0.0  0.0  0.4  1.8  0.4  0.0      26.8\n"],"name":"stdout"}]}]}